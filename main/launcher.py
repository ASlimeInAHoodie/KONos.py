from random import *
import time
import colorama

colorama.init()
## Text
# Main
CLR = '\033[2J' # Clear


def launch():
    print(CLR)
    time.sleep(randrange(1, 3))
    print("Hyper-V")
    time.sleep(0.1)
    print("SCR Network Boot 02.15.2049")
    time.sleep(0.3)
    print(" © Copyright 2049 Konaris Corporation, All Rights Reserved")
    time.sleep(0.2)
    print("")
    time.sleep(0.1)
    print("")
    time.sleep(0.1)
    print("CLIENT MAC ADDR: 00 15 5D F8 2F 1F  GUID: B2EEDOF3-8FB9-4D5O-A50B-567OE7BA4984")
    time.sleep(0.2)
    print("CLIENT IP: 192.168.3.30 MASK: 255.255.255.0 DHCP IP: 192.168.3.3")
    time.sleep(0.2)
    print("GATEWAY IP: 192.168.3.0")
    time.sleep(1)
    print("")
    time.sleep(0.1)
    print("Downloaded KON64...")
    time.sleep(0.2)
    print("")
    time.sleep(0.1)
    print("Architecture: x64")
    time.sleep(0.1)
    print("")
    time.sleep(0.1)
    print("Request ID: 7")
    time.sleep(0.1)
    print("")
    time.sleep(0.1)
    print("Contacting Server: 192.168.3.10")
    time.sleep(0.1)
    print("tFTP Download: skonboot\\x64\\spxeboot.scarar.net")
    time.sleep(0.1)
    print("tFTP Launching: skonboot x64")
    time.sleep(2)
    print("")
    time.sleep(0.1)
    print("")
    time.sleep(0.1)
    print("npvhash=" + "#" + str(randrange(1028, 2056)))
    time.sleep(0.1)
    print("high-mem traps at 0xffe00000")
    time.sleep(0.1)
    print("PAE enabled")
    time.sleep(0.1)
    print("64 bit mode enabled")
    time.sleep(0.1)
    print("rtclock_init: Taking bus ratio path 4 (Konaris / Pear)")
    time.sleep(0.1)
    print("TSC: Verification of clock speed PASSED")
    time.sleep(0.1)
    print("TSC: Frequency =   2738.94867160MHz, FSB frequency =  604.737390MHz, bus ratio = 4")
    time.sleep(0.1)
    print("Dolphin Kernel Version 19.6.0: Mon Feb 15 19:39:28 IST 2049; Vulture; Release 1.0 :xnu-1228.7.58/BUILD/obj/RELEASE_I306")
    time.sleep(0.2)
    print("standard timeslicing quantum is 10000 us")
    time.sleep(0.2)
    print("vm_page_bootstrap: 384097 free pages and 9119 wired pages")
    time.sleep(0.1)
    print("nig_table_max_displ = 79")
    time.sleep(0.1)
    print("ACPI CA 20200311 [Debug=0 layer=0]")
    time.sleep(0.1)
    print("PearACPICPU: ProcessorApicld=0 LocalApicld=0 Enabled")
    time.sleep(0.1)
    print("Loading security extension com.pear.security.KONSafetyNet")
    time.sleep(0.5)
    print("calling mpo_policy_init for KONSafetyNet")
    time.sleep(0.5)
    print("calling mpo_policy_init FAILED - False")
    time.sleep(0.5)
    print("Security extension load FAILED - Invalid Policy")
    time.sleep(0.1)
    print("Continuing in BACKUP mode")
    time.sleep(0.5)
    print("Seatbelt KONF policy initialized")
    time.sleep(0.1)
    print("Security policy loaded: Seatbelt Policy")
    time.sleep(0.1)
    print("Copyright © 1982, 1986, 1989, 1993, 1998, 2003, 2006, 2010, 2017, 2020, 2027, 2029, 2032, 2035, 2040, 2042, 2046")
    time.sleep(0.1)
    print("         The Regents of the Pear Company in relations to Konaris. All rights reserved.")
    time.sleep(1)
    print("")
    time.sleep(0.1)
    print("KON Framework successfully initialized")
    time.sleep(0.1)
    print("using 7864 buffer headers and 4096 clusters  IO buffers headers")
    time.sleep(0.1)
    print("IOAPIC: Version 0x16 Vectors 0:23")
    time.sleep(0.1)
    print("ACPI: System State [SO S5] (S0)")
    time.sleep(0.1)
    print("ACPI: Button driver prevents system sleep")
    time.sleep(0.1)
    print("ACPI: Button driver prevents system sleep")
    time.sleep(0.1)
    print("USBC:   0.871   PearUSBOHCI[0x3155800]::CheckSleepCapatibility - controller will be be unloaded across sleep")
    time.sleep(0.1)
    print("SATA WARNING: Checksum Cookie not valid")
    time.sleep(0.1)
    print("USBC:   5.989   PearUSBOHCI[0x3155000]::CheckSleepCapatibility - controller will be be unloaded across sleep")
    time.sleep(0.1)
    print("")
    time.sleep(0.1)
    print("Load Complete...")
    time.sleep(2)